{"version":3,"file":"index.js","sources":["../src/constants/types.ts","../src/utils/response.ts","../src/utils/errors.ts","../src/utils/helpers.ts","../src/database/index.ts","../src/model/auth.ts","../src/model/notes.ts","../src/model/index.ts","../src/utils/scrypt.ts","../src/middlewares/auth.ts","../src/controllers/auth.ts","../src/controllers/notes.ts","../src/routes/auth.ts","../src/routes/notes.ts","../src/app.ts","../src/utils/load-env.ts","../src/index.ts"],"sourcesContent":["export enum STATUS_CODES {\n  OK = 200,\n  CREATED = 201,\n  BAD_REQUEST = 400,\n  UNAUTHORIZED = 401,\n  FORBIDDEN = 403,\n  NOT_FOUND = 404,\n  INTERNAL_SERVER_ERROR = 500,\n}\n\nexport enum HTTP_METHODS {\n  GET = \"GET\",\n  POST = \"POST\",\n  PATCH = \"PATCH\",\n  PUT = \"PUT\",\n  DELETE = \"DELETE\",\n}\n\nexport enum PATHS {\n  INDEX = \"/\",\n  AUTH = \"/auth\",\n  NOTES = \"/notes\",\n}\n","import { ServerResponse } from \"node:http\";\nimport { STATUS_CODES } from \"../constants/types\";\n\n/**\n * Send response to client\n * @param {ServerResponse} res - ServerResponse\n * @param {number} statusCode - number\n * @param {Object} data - object\n * @returns {void}\n */\nexport function sendResponse(\n  res: ServerResponse,\n  statusCode: number,\n  data: object\n): void {\n  res.writeHead(statusCode, { \"Content-Type\": \"application/json\" });\n  res.end(JSON.stringify(data));\n}\n\ninterface ISendResponse {\n  statusCode?: number;\n  message?: string;\n  data?: object | null;\n}\nexport function sendSuccess(\n  res: ServerResponse,\n  {\n    statusCode = STATUS_CODES.OK,\n    message = \"Success\",\n    data = null,\n  }: ISendResponse\n) {\n  sendResponse(res, statusCode, { success: true, message, data: data ?? null });\n}\n\ninterface ISendError {\n  statusCode?: number;\n  message?: string;\n  data?: object | null;\n}\nexport function sendError(\n  res: ServerResponse,\n  {\n    statusCode = STATUS_CODES.INTERNAL_SERVER_ERROR,\n    message = \"Internal server error.\",\n  }: ISendError\n) {\n  sendResponse(res, statusCode, { success: false, message });\n}\n","import type { ServerResponse } from \"node:http\";\nimport { sendError } from \"./response\";\nimport { STATUS_CODES } from \"../constants/types\";\n\nexport function notFoundError(\n  res: ServerResponse,\n  message: string = \"Not found.\"\n) {\n  sendError(res, { statusCode: STATUS_CODES.NOT_FOUND, message });\n}\n\nexport function badRequestError(\n  res: ServerResponse,\n  message: string = \"Bad Request.\"\n) {\n  sendError(res, { statusCode: STATUS_CODES.BAD_REQUEST, message });\n}\n\nexport function unauthorizedError(\n  res: ServerResponse,\n  message: string = \"Unauthorized.\"\n) {\n  sendError(res, { statusCode: STATUS_CODES.UNAUTHORIZED, message });\n}\n\nexport function internalServerError(\n  res: ServerResponse,\n  message: string = \"Internal server error.\"\n) {\n  sendError(res, { statusCode: STATUS_CODES.INTERNAL_SERVER_ERROR, message });\n}\n","import type { IncomingMessage } from \"node:http\";\n\nexport function formatRequestUrl(req: IncomingMessage) {\n  const { method, url, headers } = req;\n  const parsedUrl = new URL(url ?? \"\", `http://${headers.host}`);\n  const path = parsedUrl.pathname;\n  return { method, path };\n}\n","import path from \"node:path\";\nimport url from \"node:url\";\nimport sqlite3 from \"sqlite3\";\nimport { open, Database } from \"sqlite\";\n\nconst schema = `\n  CREATE TABLE IF NOT EXISTS migrations (\n    id INTEGER PRIMARY KEY,\n    applied BOOLEAN NOT NULL DEFAULT 0\n  );\n\n  CREATE TABLE IF NOT EXISTS users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    username VARCHAR(30) NOT NULL,\n    password VARCHAR(20) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    UNIQUE(username)\n  );\n\n  CREATE TABLE IF NOT EXISTS notes (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    title VARCHAR(100) NOT NULL,\n    content TEXT NOT NULL,\n    user_id INTEGER NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n  );\n`;\n\nconst dbName = \"sqlite.db\";\nconst __dirname = path.dirname(url.fileURLToPath(import.meta.url));\n\nlet db: Database<sqlite3.Database, sqlite3.Statement> | null = null;\n\nexport async function initDB(): Promise<\n  Database<sqlite3.Database, sqlite3.Statement>\n> {\n  if (!db) {\n    db = await open({\n      filename: path.join(__dirname, dbName),\n      driver: sqlite3.Database,\n    });\n  }\n  return db;\n}\n\nexport async function closeDB(): Promise<void> {\n  if (db) {\n    await db.close();\n    db = null;\n    console.log(\"Disconnected from DB.\");\n  }\n}\n\nexport async function applyMigrations() {\n  try {\n    const db = await initDB();\n    // const migrationsApplied = await db.get(\n    //   \"SELECT applied FROM migrations WHERE id = 1\"\n    // );\n    // if (migrationsApplied && migrationsApplied.applied) {\n    //   console.log(\"Migrations have already been applied.\");\n    //   return;\n    // }\n    await db.exec(schema);\n    await db.run(\n      \"INSERT OR REPLACE INTO migrations (id, applied) VALUES (1,1)\"\n    );\n    console.log(\"Migrations applied.\");\n    return;\n  } catch (error) {\n    console.error(\"Error applying migrations:\", error);\n    process.exit(1);\n  }\n}\nexport { db };\n","import { IncomingMessage } from \"http\";\nimport { db } from \"../database\";\nexport async function createUser({\n  username,\n  password,\n}: {\n  username: string;\n  password: string;\n}) {\n  try {\n    if (!db) throw new Error(\"Database not initialised\");\n    const createdUser = await db.run(\n      \"INSERT INTO users (username, password) VALUES (?, ?)\",\n      [username, password]\n    );\n    const userId = createdUser.lastID;\n    return db.get<{ id: number; username: string }>(\n      `SELECT id, username FROM users WHERE id = ?`,\n      [userId]\n    );\n  } catch (error) {\n    console.error(\"Error creating user\", error);\n    throw error;\n  }\n}\n\nexport async function getUser(username: string) {\n  if (!db) throw new Error(\"Database not initialised\");\n  return db.get(`SELECT * FROM users WHERE username = ?`, [username]);\n}\n\nexport function getUserId(req: IncomingMessage) {\n  return (req as any).user.id;\n}\n","import { db } from \"../database\";\n\nexport async function getNotes() {\n  if (!db) throw Error(\"DB not init.\");\n  return db.all(\"SELECT * FROM notes\");\n}\n\nexport async function addNote({\n  title,\n  content,\n  userId,\n}: {\n  title: string;\n  content: string;\n  userId: number;\n}) {\n  if (!db) throw Error(\"DB not init.\");\n  const createdNote = await db.run(\n    `INSERT INTO notes (title, content, user_id) VALUES (?, ?, ?)`,\n    [title, content, userId]\n  );\n  const noteId = createdNote.lastID;\n  return db.get<{ id: number; title: string; content: string }>(\n    `SELECT id, title, content, created_at FROM notes WHERE id = ?`,\n    [noteId]\n  );\n}\n\nexport async function getUserNotes(userId: number) {\n  if (!db) throw Error(\"DB not init.\");\n  return db.all(`SELECT * FROM notes WHERE user_id = ?`, [userId]);\n}\n","import { getUser, getUserId, createUser } from \"./auth\";\nimport { getNotes, addNote } from \"./notes\";\nexport class User {\n  static getUser = getUser;\n  static getUserId = getUserId;\n  static createUser = createUser;\n}\n\nexport class Note {\n  static getNotes = getNotes;\n  static addNote = addNote;\n}\n","import crypto from \"node:crypto\";\nimport { promisify } from \"node:util\";\n\nconst asyncScrypt = promisify(crypto.scrypt);\n\nexport class Scrypt {\n  static async hash(password: string) {\n    const salt = crypto.randomBytes(8).toString(\"hex\");\n    const __buffer = (await asyncScrypt(password, salt, 64)) as Buffer;\n    return `${__buffer.toString(\"hex\")}.${salt}`;\n  }\n\n  static async compare(storedPassword: string, password: string) {\n    const [pword, salt] = storedPassword.split(\".\");\n    const __buffer = (await asyncScrypt(password, salt!, 64)) as Buffer;\n    return pword === __buffer.toString(\"hex\");\n  }\n}\n","import type { IncomingMessage, ServerResponse } from \"http\";\nimport JWT from \"jsonwebtoken\";\nimport { unauthorizedError } from \"../utils/errors\";\n\nexport function checkAuth(req: IncomingMessage, res: ServerResponse) {\n  const authHeader = req.headers.authorization;\n  if (!authHeader) {\n    unauthorizedError(res);\n    return false;\n  }\n\n  if (!authHeader.startsWith(\"Bearer\")) {\n    unauthorizedError(res);\n    return false;\n  }\n\n  const token = authHeader.split(\" \")[1];\n  if (!token) {\n    unauthorizedError(res);\n    return false;\n  }\n  try {\n    const decoded = JWT.verify(token, process.env.SECRET!);\n    (req as any).user = decoded;\n    return true;\n  } catch (error) {\n    unauthorizedError(res);\n    return false;\n  }\n}\n","import JWT from \"jsonwebtoken\";\nimport type { IncomingMessage, ServerResponse } from \"http\";\nimport { badRequestError, internalServerError } from \"../utils/errors\";\nimport { User } from \"../model\";\nimport { Scrypt } from \"../utils/scrypt\";\nimport { sendSuccess } from \"../utils/response\";\nimport { STATUS_CODES } from \"../constants/types\";\nimport { checkAuth } from \"../middlewares/auth\";\nimport { getUserNotes } from \"../model/notes\";\n\nexport function signup(req: IncomingMessage, res: ServerResponse) {\n  let body = \"\";\n  req.on(\"data\", (chunk) => {\n    body += chunk.toString();\n  });\n\n  req.on(\"end\", async () => {\n    try {\n      const { username, password } = JSON.parse(body);\n\n      if (!username || !password) {\n        return badRequestError(res, \"Username and password are required.\");\n      }\n      if (username.length < 3) {\n        return badRequestError(res, \"Username must be atleat 3 chars.\");\n      }\n      if (password.length < 6) {\n        return badRequestError(res, \"Password must be atleat 6 chars.\");\n      }\n      const existingUser = await User.getUser(username);\n      if (existingUser) {\n        return badRequestError(res, \"User already exist.\");\n      }\n      const hashedPassword = await Scrypt.hash(password);\n      const user = {\n        username,\n        password: hashedPassword,\n      };\n      const createdUser = await User.createUser(user);\n      if (!createdUser) return internalServerError(res, \"Error creating user.\");\n      const token = JWT.sign(createdUser, process.env.SECRET!, {\n        expiresIn: \"7d\",\n      });\n      sendSuccess(res, {\n        statusCode: STATUS_CODES.CREATED,\n        message: \"sign up success\",\n        data: { token },\n      });\n    } catch (error) {\n      internalServerError(res);\n    }\n  });\n}\nexport function signin(req: IncomingMessage, res: ServerResponse) {\n  let body = \"\";\n  req.on(\"data\", (chunk) => {\n    body += chunk.toString();\n  });\n\n  req.on(\"end\", async () => {\n    try {\n      const { username, password } = JSON.parse(body);\n      if (!username || !password) {\n        return badRequestError(res, \"Username and password are required.\");\n      }\n\n      const existingUser = await User.getUser(username);\n      if (!existingUser) {\n        return badRequestError(res, \"Invalid credentials.\");\n      }\n\n      const isValid = await Scrypt.compare(existingUser.password, password);\n\n      if (!isValid) {\n        return badRequestError(res, \"Invalid credentials.\");\n      }\n\n      const payload = {\n        id: existingUser.id,\n        username: existingUser.username,\n      };\n\n      const token = JWT.sign(payload, process.env.SECRET!, {\n        expiresIn: \"7d\",\n      });\n\n      sendSuccess(res, {\n        message: \"signin success\",\n        data: { token },\n      });\n    } catch (error) {\n      internalServerError(res);\n    }\n  });\n}\nexport async function me(req: IncomingMessage, res: ServerResponse) {\n  const auth = checkAuth(req, res);\n  if (!auth) return;\n\n  const id = (req as any).user.id;\n  const username = (req as any).user.username;\n\n  const notes = await getUserNotes(id);\n\n  sendSuccess(res, {\n    data: {\n      user: {\n        id,\n        username,\n        notes,\n      },\n    },\n  });\n}\nexport function signout(res: ServerResponse) {\n  sendSuccess(res, {\n    message: \"Signout success\",\n    data: { token: null },\n  });\n}\n","import type { IncomingMessage, ServerResponse } from \"node:http\";\nimport { sendSuccess } from \"../utils/response\";\nimport { Note } from \"../model\";\nimport { checkAuth } from \"../middlewares/auth\";\nimport { badRequestError, internalServerError } from \"../utils/errors\";\nimport { getUserId } from \"../model/auth\";\nimport { STATUS_CODES } from \"../constants/types\";\n\nexport async function getNotes(req: IncomingMessage, res: ServerResponse) {\n  sendSuccess(res, { data: { notes: await Note.getNotes() } });\n}\nexport function getNote(req: IncomingMessage, res: ServerResponse) {}\n\nexport function addNote(req: IncomingMessage, res: ServerResponse) {\n  const auth = checkAuth(req, res);\n  if (!auth) return;\n\n  let body = \"\";\n  req.on(\"data\", (chunk) => {\n    body += chunk.toString();\n  });\n\n  req.on(\"end\", async () => {\n    const userId = getUserId(req);\n    const { title, content } = JSON.parse(body);\n    if (!title || !content || !userId) {\n      return badRequestError(res, \"All fields required\");\n    }\n    const note = await Note.addNote({\n      title,\n      content,\n      userId,\n    });\n    if (!note) {\n      return internalServerError(res, \"Error creating note\");\n    }\n\n    sendSuccess(res, {\n      statusCode: STATUS_CODES.CREATED,\n      data: { note },\n    });\n  });\n}\nexport function updateNote(req: IncomingMessage, res: ServerResponse) {}\nexport function deleteNote(req: IncomingMessage, res: ServerResponse) {}\n","import type { IncomingMessage, ServerResponse } from \"node:http\";\nimport { HTTP_METHODS, PATHS } from \"../constants/types\";\nimport { notFoundError } from \"../utils/errors\";\nimport { formatRequestUrl } from \"../utils/helpers\";\nimport { me, signin, signout, signup } from \"../controllers\";\n\nexport function handleAuth(req: IncomingMessage, res: ServerResponse) {\n  const { method, path } = formatRequestUrl(req);\n  if (path === `${PATHS.AUTH}/signup` && method === HTTP_METHODS.POST) {\n    signup(req, res);\n  } else if (path === `${PATHS.AUTH}/signin` && method === HTTP_METHODS.POST) {\n    signin(req, res);\n  } else if (path === `${PATHS.AUTH}/me` && method === HTTP_METHODS.GET) {\n    me(req, res);\n  } else if (path === `${PATHS.AUTH}/signout` && method === HTTP_METHODS.GET) {\n    signout(res);\n  } else {\n    notFoundError(res, \"Auth route not found\");\n  }\n}\n","import type { IncomingMessage, ServerResponse } from \"node:http\";\nimport { formatRequestUrl } from \"../utils/helpers\";\nimport { HTTP_METHODS, PATHS } from \"../constants/types\";\nimport { notFoundError } from \"../utils/errors\";\nimport {\n  addNote,\n  deleteNote,\n  getNote,\n  getNotes,\n  updateNote,\n} from \"../controllers\";\n\nexport function handleNotes(req: IncomingMessage, res: ServerResponse) {\n  const { method, path } = formatRequestUrl(req);\n  if (path === PATHS.NOTES && method === HTTP_METHODS.GET) {\n    getNotes(req, res);\n  } else if (path === PATHS.NOTES && method === HTTP_METHODS.POST) {\n    addNote(req, res);\n  } else if (\n    path.startsWith(`${PATHS.NOTES}/`) &&\n    method === HTTP_METHODS.GET\n  ) {\n    getNote(req, res);\n  } else if (\n    path.startsWith(`${PATHS.NOTES}/`) &&\n    method === HTTP_METHODS.PATCH\n  ) {\n    updateNote(req, res);\n  } else if (\n    path.startsWith(`${PATHS.NOTES}/`) &&\n    method === HTTP_METHODS.DELETE\n  ) {\n    deleteNote(req, res);\n  } else {\n    notFoundError(res, \"Notes route not found.\");\n  }\n}\n","import path from \"node:path\";\nimport fs from \"node:fs\";\nimport http, { IncomingMessage, ServerResponse } from \"node:http\";\nimport { handleAuth } from \"./routes\";\nimport { formatRequestUrl } from \"./utils/helpers\";\nimport { HTTP_METHODS, PATHS, STATUS_CODES } from \"./constants/types\";\nimport { notFoundError } from \"./utils/errors\";\nimport { handleNotes } from \"./routes/notes\";\n\nconst __dirname = path.dirname(new URL(import.meta.url).pathname);\nconst htmlFilePath = path.join(__dirname, \"../public\", \"index.html\");\nconst htmlFileContent = fs.readFileSync(htmlFilePath, \"utf8\");\n\nfunction sendHTML(res: ServerResponse, html: string) {\n  res.writeHead(STATUS_CODES.OK, { \"Content-Type\": \"text/html\" });\n  res.write(html);\n  res.end();\n}\n\nfunction serverHandler(req: IncomingMessage, res: ServerResponse) {\n  const { method, path } = formatRequestUrl(req);\n  if (path === PATHS.INDEX && method === HTTP_METHODS.GET) {\n    sendHTML(res, htmlFileContent);\n  } else if (path.startsWith(PATHS.AUTH)) {\n    handleAuth(req, res);\n  } else if (path.startsWith(PATHS.NOTES)) {\n    handleNotes(req, res);\n  } else {\n    notFoundError(res, \"Route not found\");\n  }\n}\n\nconst app = http.createServer(serverHandler);\n\nexport { app };\n","import fs from \"node:fs\";\nimport path from \"node:path\";\nimport process from \"node:process\";\n\nexport function loadEnv() {\n  const envPath = path.join(process.cwd(), \".env\");\n  const envFileContent = fs.readFileSync(envPath, { encoding: \"utf8\" });\n\n  envFileContent.split(\"\\n\").forEach((line) => {\n    const [key, value] = line.split(\"=\");\n    if (key && value) {\n      process.env[key.trim()] = value.trim();\n    }\n  });\n}\n","import { app } from \"./app\";\nimport { applyMigrations, closeDB, initDB } from \"./database\";\nimport { loadEnv } from \"./utils/load-env\";\n\nconst { NODE_ENV } = process.env;\n\nif (NODE_ENV !== \"production\") {\n  loadEnv();\n}\n\nawait applyMigrations();\n\nconst { PORT } = process.env;\ninitDB()\n  .then(() => {\n    console.log(\"Connected to DB.\");\n    const server = app.listen(PORT, () => {\n      console.log(`Server running on port: ${PORT}`);\n    });\n\n    process.on(\"SIGINT\", async () => {\n      console.log(\"\\nShutting down server...\");\n      server.close(async () => {\n        await closeDB();\n        console.log(\"Server has been gracefully terminated.\");\n        process.exit(0);\n      });\n    });\n\n    process.on(\"uncaughtException\", async (error) => {\n      console.error(\"Uncaught Exception:\", error);\n      await closeDB();\n      process.exit(1);\n    });\n  })\n  .catch((error) => {\n    console.error(\"Failed to connect to DB:\", error);\n    process.exit(1);\n  });\n"],"names":["__dirname","getNotes","addNote","process"],"mappings":"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"}