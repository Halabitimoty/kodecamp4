var M=Object.defineProperty;var s=(t,e)=>M(t,"name",{value:e,configurable:!0});import p from"node:path";import y from"node:fs";import _ from"node:http";import g from"jsonwebtoken";import"http";import $ from"node:url";import H from"sqlite3";import{open as G}from"sqlite";import O from"node:crypto";import{promisify as V}from"node:util";import A from"node:process";var d=(t=>(t[t.OK=200]="OK",t[t.CREATED=201]="CREATED",t[t.BAD_REQUEST=400]="BAD_REQUEST",t[t.UNAUTHORIZED=401]="UNAUTHORIZED",t[t.FORBIDDEN=403]="FORBIDDEN",t[t.NOT_FOUND=404]="NOT_FOUND",t[t.INTERNAL_SERVER_ERROR=500]="INTERNAL_SERVER_ERROR",t))(d||{}),u=(t=>(t.GET="GET",t.POST="POST",t.PATCH="PATCH",t.PUT="PUT",t.DELETE="DELETE",t))(u||{}),c=(t=>(t.INDEX="/",t.AUTH="/auth",t.NOTES="/notes",t))(c||{});function L(t,e,r){t.writeHead(e,{"Content-Type":"application/json"}),t.end(JSON.stringify(r))}s(L,"sendResponse");function f(t,{statusCode:e=d.OK,message:r="Success",data:n=null}){L(t,e,{success:!0,message:r,data:n??null})}s(f,"sendSuccess");function h(t,{statusCode:e=d.INTERNAL_SERVER_ERROR,message:r="Internal server error."}){L(t,e,{success:!1,message:r})}s(h,"sendError");function U(t,e="Not found."){h(t,{statusCode:d.NOT_FOUND,message:e})}s(U,"notFoundError");function E(t,e="Bad Request."){h(t,{statusCode:d.BAD_REQUEST,message:e})}s(E,"badRequestError");function m(t,e="Unauthorized."){h(t,{statusCode:d.UNAUTHORIZED,message:e})}s(m,"unauthorizedError");function T(t,e="Internal server error."){h(t,{statusCode:d.INTERNAL_SERVER_ERROR,message:e})}s(T,"internalServerError");function I(t){const{method:e,url:r,headers:n}=t,i=new URL(r??"",`http://${n.host}`).pathname;return{method:e,path:i}}s(I,"formatRequestUrl");const W=`
  CREATE TABLE IF NOT EXISTS migrations (
    id INTEGER PRIMARY KEY,
    applied BOOLEAN NOT NULL DEFAULT 0
  );

  CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username VARCHAR(30) NOT NULL,
    password VARCHAR(20) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(username)
  );

  CREATE TABLE IF NOT EXISTS notes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title VARCHAR(100) NOT NULL,
    content TEXT NOT NULL,
    user_id INTEGER NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
  );
`,K="sqlite.db",Y=p.dirname($.fileURLToPath(import.meta.url));let a=null;async function v(){return a||(a=await G({filename:p.join(Y,K),driver:H.Database})),a}s(v,"initDB");async function C(){a&&(await a.close(),a=null,console.log("Disconnected from DB."))}s(C,"closeDB");async function k(){try{const t=await v();await t.exec(W),await t.run("INSERT OR REPLACE INTO migrations (id, applied) VALUES (1,1)"),console.log("Migrations applied.");return}catch(t){console.error("Error applying migrations:",t),process.exit(1)}}s(k,"applyMigrations");async function X({username:t,password:e}){try{if(!a)throw new Error("Database not initialised");const n=(await a.run("INSERT INTO users (username, password) VALUES (?, ?)",[t,e])).lastID;return a.get("SELECT id, username FROM users WHERE id = ?",[n])}catch(r){throw console.error("Error creating user",r),r}}s(X,"createUser");async function J(t){if(!a)throw new Error("Database not initialised");return a.get("SELECT * FROM users WHERE username = ?",[t])}s(J,"getUser");function F(t){return t.user.id}s(F,"getUserId");async function j(){if(!a)throw Error("DB not init.");return a.all("SELECT * FROM notes")}s(j,"getNotes$1");async function Q({title:t,content:e,userId:r}){if(!a)throw Error("DB not init.");const o=(await a.run("INSERT INTO notes (title, content, user_id) VALUES (?, ?, ?)",[t,e,r])).lastID;return a.get("SELECT id, title, content, created_at FROM notes WHERE id = ?",[o])}s(Q,"addNote$1");async function z(t){if(!a)throw Error("DB not init.");return a.all("SELECT * FROM notes WHERE user_id = ?",[t])}s(z,"getUserNotes");class w{static{s(this,"User")}static getUser=J;static getUserId=F;static createUser=X}class D{static{s(this,"Note")}static getNotes=j;static addNote=Q}const S=V(O.scrypt);class B{static{s(this,"Scrypt")}static async hash(e){const r=O.randomBytes(8).toString("hex");return`${(await S(e,r,64)).toString("hex")}.${r}`}static async compare(e,r){const[n,o]=e.split("."),i=await S(r,o,64);return n===i.toString("hex")}}function b(t,e){const r=t.headers.authorization;if(!r||!r.startsWith("Bearer"))return m(e),!1;const n=r.split(" ")[1];if(!n)return m(e),!1;try{const o=g.verify(n,process.env.SECRET);return t.user=o,!0}catch{return m(e),!1}}s(b,"checkAuth");function Z(t,e){let r="";t.on("data",n=>{r+=n.toString()}),t.on("end",async()=>{try{const{username:n,password:o}=JSON.parse(r);if(!n||!o)return E(e,"Username and password are required.");if(n.length<3)return E(e,"Username must be atleat 3 chars.");if(o.length<6)return E(e,"Password must be atleat 6 chars.");if(await w.getUser(n))return E(e,"User already exist.");const R=await B.hash(o),l={username:n,password:R},N=await w.createUser(l);if(!N)return T(e,"Error creating user.");const P=g.sign(N,process.env.SECRET,{expiresIn:"7d"});f(e,{statusCode:d.CREATED,message:"sign up success",data:{token:P}})}catch{T(e)}})}s(Z,"signup");function q(t,e){let r="";t.on("data",n=>{r+=n.toString()}),t.on("end",async()=>{try{const{username:n,password:o}=JSON.parse(r);if(!n||!o)return E(e,"Username and password are required.");const i=await w.getUser(n);if(!i||!await B.compare(i.password,o))return E(e,"Invalid credentials.");const l={id:i.id,username:i.username},N=g.sign(l,process.env.SECRET,{expiresIn:"7d"});f(e,{message:"signin success",data:{token:N}})}catch{T(e)}})}s(q,"signin");async function tt(t,e){if(!b(t,e))return;const n=t.user.id,o=t.user.username,i=await z(n);f(e,{data:{user:{id:n,username:o,notes:i}}})}s(tt,"me");function et(t){f(t,{message:"Signout success",data:{token:null}})}s(et,"signout");async function nt(t,e){f(e,{data:{notes:await D.getNotes()}})}s(nt,"getNotes");function rt(t,e){if(!b(t,e))return;let n="";t.on("data",o=>{n+=o.toString()}),t.on("end",async()=>{const o=F(t),{title:i,content:R}=JSON.parse(n);if(!i||!R||!o)return E(e,"All fields required");const l=await D.addNote({title:i,content:R,userId:o});if(!l)return T(e,"Error creating note");f(e,{statusCode:d.CREATED,data:{note:l}})})}s(rt,"addNote");function st(t,e){const{method:r,path:n}=I(t);n===`${c.AUTH}/signup`&&r===u.POST?Z(t,e):n===`${c.AUTH}/signin`&&r===u.POST?q(t,e):n===`${c.AUTH}/me`&&r===u.GET?tt(t,e):n===`${c.AUTH}/signout`&&r===u.GET?et(e):U(e,"Auth route not found")}s(st,"handleAuth");function ot(t,e){const{method:r,path:n}=I(t);n===c.NOTES&&r===u.GET?nt(t,e):n===c.NOTES&&r===u.POST?rt(t,e):n.startsWith(`${c.NOTES}/`)&&r===u.GET||n.startsWith(`${c.NOTES}/`)&&r===u.PATCH||n.startsWith(`${c.NOTES}/`)&&r===u.DELETE||U(e,"Notes route not found.")}s(ot,"handleNotes");const at=p.dirname(new URL(import.meta.url).pathname),it=p.join(at,"../public","index.html"),ct=y.readFileSync(it,"utf8");function ut(t,e){t.writeHead(d.OK,{"Content-Type":"text/html"}),t.write(e),t.end()}s(ut,"sendHTML");function dt(t,e){const{method:r,path:n}=I(t);n===c.INDEX&&r===u.GET?ut(e,ct):n.startsWith(c.AUTH)?st(t,e):n.startsWith(c.NOTES)?ot(t,e):U(e,"Route not found")}s(dt,"serverHandler");const Et=_.createServer(dt);function lt(){const t=p.join(A.cwd(),".env");y.readFileSync(t,{encoding:"utf8"}).split(`
`).forEach(r=>{const[n,o]=r.split("=");n&&o&&(A.env[n.trim()]=o.trim())})}s(lt,"loadEnv");const{NODE_ENV:ft}=process.env;ft!=="production"&&lt(),await k();const{PORT:x}=process.env;v().then(()=>{console.log("Connected to DB.");const t=Et.listen(x,()=>{console.log(`Server running on port: ${x}`)});process.on("SIGINT",async()=>{console.log(`
Shutting down server...`),t.close(async()=>{await C(),console.log("Server has been gracefully terminated."),process.exit(0)})}),process.on("uncaughtException",async e=>{console.error("Uncaught Exception:",e),await C(),process.exit(1)})}).catch(t=>{console.error("Failed to connect to DB:",t),process.exit(1)});
//# sourceMappingURL=index.js.map
